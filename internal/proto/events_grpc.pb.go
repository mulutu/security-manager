// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Simplified version for older gRPC compatibility

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentIngest_Authenticate_FullMethodName    = "/proto.AgentIngest/Authenticate"
	AgentIngest_StreamEvents_FullMethodName    = "/proto.AgentIngest/StreamEvents"
	AgentIngest_ReceiveCommands_FullMethodName = "/proto.AgentIngest/ReceiveCommands"
)

// AgentIngestClient is the client API for AgentIngest service.
type AgentIngestClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (AgentIngest_StreamEventsClient, error)
	ReceiveCommands(ctx context.Context, opts ...grpc.CallOption) (AgentIngest_ReceiveCommandsClient, error)
}

type agentIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentIngestClient(cc grpc.ClientConnInterface) AgentIngestClient {
	return &agentIngestClient{cc}
}

func (c *agentIngestClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AgentIngest_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentIngestClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (AgentIngest_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentIngest_ServiceDesc.Streams[0], AgentIngest_StreamEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentIngestStreamEventsClient{stream}
	return x, nil
}

type AgentIngest_StreamEventsClient interface {
	Send(*LogEvent) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type agentIngestStreamEventsClient struct {
	grpc.ClientStream
}

func (x *agentIngestStreamEventsClient) Send(m *LogEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentIngestStreamEventsClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentIngestClient) ReceiveCommands(ctx context.Context, opts ...grpc.CallOption) (AgentIngest_ReceiveCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentIngest_ServiceDesc.Streams[1], AgentIngest_ReceiveCommands_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentIngestReceiveCommandsClient{stream}
	return x, nil
}

type AgentIngest_ReceiveCommandsClient interface {
	Send(*MitigateResponse) error
	Recv() (*MitigateRequest, error)
	grpc.ClientStream
}

type agentIngestReceiveCommandsClient struct {
	grpc.ClientStream
}

func (x *agentIngestReceiveCommandsClient) Send(m *MitigateResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentIngestReceiveCommandsClient) Recv() (*MitigateRequest, error) {
	m := new(MitigateRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentIngestServer is the server API for AgentIngest service.
type AgentIngestServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	StreamEvents(AgentIngest_StreamEventsServer) error
	ReceiveCommands(AgentIngest_ReceiveCommandsServer) error
}

// UnimplementedAgentIngestServer can be embedded to have forward compatible implementations.
type UnimplementedAgentIngestServer struct {
}

func (*UnimplementedAgentIngestServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedAgentIngestServer) StreamEvents(AgentIngest_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (*UnimplementedAgentIngestServer) ReceiveCommands(AgentIngest_ReceiveCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveCommands not implemented")
}

func RegisterAgentIngestServer(s grpc.ServiceRegistrar, srv AgentIngestServer) {
	s.RegisterService(&AgentIngest_ServiceDesc, srv)
}

func _AgentIngest_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentIngestServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentIngest_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentIngestServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentIngest_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentIngestServer).StreamEvents(&agentIngestStreamEventsServer{stream})
}

type AgentIngest_StreamEventsServer interface {
	SendAndClose(*Ack) error
	Recv() (*LogEvent, error)
	grpc.ServerStream
}

type agentIngestStreamEventsServer struct {
	grpc.ServerStream
}

func (x *agentIngestStreamEventsServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentIngestStreamEventsServer) Recv() (*LogEvent, error) {
	m := new(LogEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AgentIngest_ReceiveCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentIngestServer).ReceiveCommands(&agentIngestReceiveCommandsServer{stream})
}

type AgentIngest_ReceiveCommandsServer interface {
	Send(*MitigateRequest) error
	Recv() (*MitigateResponse, error)
	grpc.ServerStream
}

type agentIngestReceiveCommandsServer struct {
	grpc.ServerStream
}

func (x *agentIngestReceiveCommandsServer) Send(m *MitigateRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentIngestReceiveCommandsServer) Recv() (*MitigateResponse, error) {
	m := new(MitigateResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentIngest_ServiceDesc is the grpc.ServiceDesc for AgentIngest service.
var AgentIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgentIngest",
	HandlerType: (*AgentIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AgentIngest_Authenticate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _AgentIngest_StreamEvents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveCommands",
			Handler:       _AgentIngest_ReceiveCommands_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/events.proto",
}

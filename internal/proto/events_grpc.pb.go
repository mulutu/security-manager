// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/proto/events.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentIngest_Authenticate_FullMethodName    = "/proto.AgentIngest/Authenticate"
	AgentIngest_StreamEvents_FullMethodName    = "/proto.AgentIngest/StreamEvents"
	AgentIngest_ReceiveCommands_FullMethodName = "/proto.AgentIngest/ReceiveCommands"
)

// AgentIngestClient is the client API for AgentIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentIngestClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogEvent, Ack], error)
	ReceiveCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MitigateResponse, MitigateRequest], error)
}

type agentIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentIngestClient(cc grpc.ClientConnInterface) AgentIngestClient {
	return &agentIngestClient{cc}
}

func (c *agentIngestClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AgentIngest_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentIngestClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogEvent, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentIngest_ServiceDesc.Streams[0], AgentIngest_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogEvent, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentIngest_StreamEventsClient = grpc.ClientStreamingClient[LogEvent, Ack]

func (c *agentIngestClient) ReceiveCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MitigateResponse, MitigateRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentIngest_ServiceDesc.Streams[1], AgentIngest_ReceiveCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MitigateResponse, MitigateRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentIngest_ReceiveCommandsClient = grpc.BidiStreamingClient[MitigateResponse, MitigateRequest]

// AgentIngestServer is the server API for AgentIngest service.
// All implementations must embed UnimplementedAgentIngestServer
// for forward compatibility.
type AgentIngestServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	StreamEvents(grpc.ClientStreamingServer[LogEvent, Ack]) error
	ReceiveCommands(grpc.BidiStreamingServer[MitigateResponse, MitigateRequest]) error
	mustEmbedUnimplementedAgentIngestServer()
}

// UnimplementedAgentIngestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentIngestServer struct{}

func (UnimplementedAgentIngestServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAgentIngestServer) StreamEvents(grpc.ClientStreamingServer[LogEvent, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedAgentIngestServer) ReceiveCommands(grpc.BidiStreamingServer[MitigateResponse, MitigateRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveCommands not implemented")
}
func (UnimplementedAgentIngestServer) mustEmbedUnimplementedAgentIngestServer() {}
func (UnimplementedAgentIngestServer) testEmbeddedByValue()                     {}

// UnsafeAgentIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentIngestServer will
// result in compilation errors.
type UnsafeAgentIngestServer interface {
	mustEmbedUnimplementedAgentIngestServer()
}

func RegisterAgentIngestServer(s grpc.ServiceRegistrar, srv AgentIngestServer) {
	// If the following call pancis, it indicates UnimplementedAgentIngestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentIngest_ServiceDesc, srv)
}

func _AgentIngest_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentIngestServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentIngest_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentIngestServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentIngest_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentIngestServer).StreamEvents(&grpc.GenericServerStream[LogEvent, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentIngest_StreamEventsServer = grpc.ClientStreamingServer[LogEvent, Ack]

func _AgentIngest_ReceiveCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentIngestServer).ReceiveCommands(&grpc.GenericServerStream[MitigateResponse, MitigateRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentIngest_ReceiveCommandsServer = grpc.BidiStreamingServer[MitigateResponse, MitigateRequest]

// AgentIngest_ServiceDesc is the grpc.ServiceDesc for AgentIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgentIngest",
	HandlerType: (*AgentIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AgentIngest_Authenticate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _AgentIngest_StreamEvents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveCommands",
			Handler:       _AgentIngest_ReceiveCommands_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/events.proto",
}
